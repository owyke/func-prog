class Rational(x: Int, y: Int) {
	
	require(y != 0, "denominator must be nonzero")
	
	def this.(x: Int) = this(x, 1)
	
	val numer = x / gcd(x, y)
	val denom = y / gcd(x, y)
	
	private def gcd(a: Int, b: Int): Int = if(b == 0) a else gcd(b, a % b)
	
	
	def add(that: Rational) =
		new Rational(
			numer*that.denom + that.numer*denom,
			denom * that.denom)
			override def toString = numer + "/" + denom
			
	def neg = new Rational(-numer, denom)
	
	def sub(that: Rational) = add(that.neg)

	def less(that: Rational) = numer * that.denom < that.numer * denom

	def max(that: Rational) = if(this.less(that)) that else this
}


object RationalNumbers {
  
  val x = new Rational(1, 3)
  val y = new Rational(5, 7)
  val z = new Rational(3, 2)
  
  def gcd(a: Int, b: Int): Int = if(b == 0) a else gcd(b, a % b)
  
  x.less(y)
 
 	x.max(z)
  
  gcd(6,8)
  
  
  
}