trait List[T] {
    def isEmpty: Boolean
    def head: T
    def tail: List[T]
}

class Cons[T](val head: T, val tail: List[T]) extends List[T] {
    def isEmpty = false
    override def toString = head + " " + tail.toString() 
}

class Nil[T] extends List[T]{
    def isEmpty = true
    def head = throw new NoSuchElementException("Nil.head")
    def tail = throw new NoSuchElementException("Nil.tail")
    override def toString = ""
    
}


object Run {

    def main(args: Array[String]) {
        val l = new Cons(1,new Cons(3,new Cons(5, new Nil[Int])));
        println(l.toString)
    }
    
    
    def nth(list: List[_], index: Int) {
        if(index < 0 || list.isEmpty) throw new IndexOutOfBoundsException
        else if (index == 0) list.head
    }
    

    
}
